# MAIN Ubuntu + ngrok (SSH) Workflow
# Description: Starts an Ubuntu runner, enables SSH, starts ngrok TCP tunnel
# and prints the ready-to-use SSH command (tcp.ngrok.io:PORT).
# Author: ourcaldo@gmail.com
# Version: 1.2
# Date: 2025-09-21

name: Main Ubuntu (ngrok-ssh)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 350

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update & install required packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends openssh-server curl unzip jq
          sudo systemctl enable --now ssh
          sudo ssh -V || true
          ss -tunlp | sed -n '1,200p'

      - name: Configure SSH user & allow password auth
        run: |
          echo "runner:P@ssw0rd!" | sudo chpasswd
          sudo sed -i 's/^#\?PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config || true
          sudo systemctl restart ssh
          sleep 1
          ss -tunlp | grep ssh || true

      - name: Download & install ngrok (v3)
        run: |
          curl -sSL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz -o ngrok.tgz
          tar -xzf ngrok.tgz
          sudo mv ngrok /usr/local/bin/ngrok
          sudo chmod +x /usr/local/bin/ngrok
          ngrok version

      - name: Create ngrok config (TCP tunnel for SSH)
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          mkdir -p ~/.ngrok2
          cat > ~/.ngrok2/ngrok.yml <<EOF
authtoken: ${NGROK_AUTH_TOKEN}
tunnels:
  ssh:
    proto: tcp
    addr: 22
EOF

      - name: Start ngrok tunnel (background) and wait for API
        run: |
          nohup ngrok start --config ~/.ngrok2/ngrok.yml ssh > ngrok.log 2>&1 &
          ATTEMPTS=20
          COUNT=0
          while [ $COUNT -lt $ATTEMPTS ]; do
            sleep 1
            if curl -sS http://127.0.0.1:4040/api/tunnels > /dev/null 2>&1; then
              break
            fi
            COUNT=$((COUNT+1))
          done
          curl -sS http://127.0.0.1:4040/api/tunnels || true
          sed -n '1,200p' ngrok.log || true

      - name: Resolve and print SSH command
        id: get_endpoint
        run: |
          API_JSON=$(curl -sS http://127.0.0.1:4040/api/tunnels || true)
          PUBLIC_URL=$(echo "$API_JSON" | jq -r '.tunnels[]?.public_url' | grep '^tcp://' || true)
          if [ -z "$PUBLIC_URL" ]; then
            PUBLIC_URL=$(grep -oE 'tcp://[[:alnum:].-]+:[0-9]+' ngrok.log | head -n1 || true)
          fi
          if [ -z "$PUBLIC_URL" ]; then
            echo "ERROR: No tcp public_url found"
            exit 1
          fi
          HOSTPORT=${PUBLIC_URL#tcp://}
          HOST=$(echo "$HOSTPORT" | cut -d: -f1)
          PORT=$(echo "$HOSTPORT" | cut -d: -f2)
          echo "==== NGROK TCP endpoint ===="
          echo "public_url: $PUBLIC_URL"
          echo "ssh runner@${HOST} -p ${PORT}"
          echo "Password: P@ssw0rd!"
          echo "============================"
          echo "ssh_command=ssh runner@${HOST} -p ${PORT}" >> $GITHUB_OUTPUT
          echo "ssh_host=${HOST}" >> $GITHUB_OUTPUT
          echo "ssh_port=${PORT}" >> $GITHUB_OUTPUT

      - name: Keep alive (5h30m)
        run: sleep 19800

      - name: Mark workflow as successful
        run: echo "Success!"
